import math
import sys

var main = -> {
	do {
		run()
	} on fail {
		std.print( current_fail )
	}
}

typedef GLfloat2 : [
	x : GLfloat,
	y : GLfloat,
]

var run = -> {
	var app = sdl_gl_window("Leaf SDL Window", 600, 450 )

	var tex_tree = gl_texture.from_file( "tree.jpg" )
	
	var program : gl_program
	program.attach_vertex_shader( "gl_demo/basic.vert" )
	program.attach_fragment_shader( "gl_demo/basic.frag" )
	program.link()
	
	var vpos = program.get_attrib_location( "LVertexPos2D" )
	var tc_pos = program.get_attrib_location( "LTexCoord" )
	var tex_pos = program.get_uniform_location( "tex" )
	var position_pos = program.get_uniform_location( "position" )
	var size_pos = program.get_uniform_location( "size" )
	
	var vertex_data = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	vertex_data.push( [ -0.5, -0.5 ] )
	vertex_data.push( [ 0.5, -0.5 ] )
	vertex_data.push( [ 0.5, 0.5 ] )
	vertex_data.push( [ -0.5, 0.5 ] )
	
	var index_data = gl_buffer｢GLuint｣( GL_ELEMENT_ARRAY_BUFFER )
	index_data.push(0)
	index_data.push(1)
	index_data.push(2)
	index_data.push(3)
	index_data.bind_and_push( GL_STATIC_DRAW )
	
	var tex_coord = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	tex_coord.push( [0,0] )
	tex_coord.push( [1,0] )
	tex_coord.push( [1,1] )
	tex_coord.push( [0,1] )
	tex_coord.bind_and_push( GL_STATIC_DRAW )
	
	gl_clear_color(0,0.5,0.5,1)
	
 	var run = true
 	var iter : float = 0
	while run {
		var e : SDL_Event
		while sdl_poll_event(e) != 0 {
			var q = sdl_poll_event(e)
			e.type_ == SDL_QUIT then  {
				run = false
			}
			e.type_ == SDL_WINDOWEVENT then {
				var win_ev = cast_ptr｢SDL_WindowEvent value_ptr｣(e)
				win_ev.event == SDL_WINDOWEVENT_SIZE_CHANGED then {
					var window_sz = sdl_get_window_size(app.window)
					gl_viewport( 0, 0, window_sz.x, window_sz.y )
				}
			}
		}

		for r in std.range(0,4) {
			var ang = lossy｢float｣(r) * math.pi / 2 + iter * 0.005
			var sz = math.sin(iter * 0.02*lossy(r) + lossy(r))/4 +0.75
			vertex_data.set( r, [lossy(math.cos(ang) * sz), lossy(math.sin(ang) * sz)] )
		}
		vertex_data.bind_and_push( GL_DYNAMIC_DRAW )
		
		gl_clear( GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT )
		program.use()
		
		gl_enable_vertex_attrib_array( vpos );
		gl_enable_vertex_attrib_array( tc_pos );
		check_gl_error( "vertex_attrib" )
		
		gl_bind_buffer( GL_ARRAY_BUFFER, vertex_data.get_buffer() )
		gl_vertex_attrib_pointer( vpos, 2, GL_FLOAT, GL_FALSE, 2  * GLfloat.aligned_value_size, 0 )
		check_gl_error( "attrib_pointer" )
		
		gl_bind_buffer( GL_ARRAY_BUFFER, tex_coord.get_buffer() )
		gl_vertex_attrib_pointer( tc_pos, 2, GL_FLOAT, GL_FALSE, 2 * GLfloat.aligned_value_size, 0)

		var off_r = lossy｢GLfloat｣((math.sin(iter*0.02)+1)/2)
		gl_active_texture(GL_TEXTURE0)
		gl_bind_texture(GL_TEXTURE_2D, tex_tree.buffer)
		program.set_uniform( tex_pos, 0 )
		program.set_uniform( position_pos, 0.3 * off_r, 0.3 * off_r )
		program.set_uniform( size_pos, 1.2, 1.2 )
		
		gl_bind_buffer( GL_ELEMENT_ARRAY_BUFFER, index_data.get_buffer() )
		gl_draw_elements( GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, 0 )
		
		program.set_uniform( position_pos, -0.1 * off_r, -0.1 * off_r )
		program.set_uniform( size_pos, 0.8, 0.8 )
		gl_draw_elements( GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, 0 )
		
		program.set_uniform( position_pos, -0.5 * off_r, -0.5 * off_r)
		program.set_uniform( size_pos, 0.4, 0.4)
		gl_draw_elements( GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, 0 )
		
		gl_disable_vertex_attrib_array( vpos )
		gl_disable_vertex_attrib_array( tc_pos )
		sdl_gl_swap_window( app.window )
		iter += 1
	}
}
