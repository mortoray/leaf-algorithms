import math
import sys

var main = -> {
	do {
		run()
	} on fail {
		std.print( current_fail )
	}
}

typedef GLfloat2 : [
	x : GLfloat,
	y : GLfloat,
]

var run = -> {
	var app = sdl_gl_window("Leaf SDL Window", 600, 450 )

	var r = sdl_ttf_init()
	std.println(["TTF: ", r])
	var font = sdl_ttf_open_font( std.u8_encode( "font/leaf1.TTF" ).raw_ptr, 32 )
	as_abi_ptr(font) == 0 then {
		std.println(["Load failed"])
		return
	}
	
	var tex_tree = gl_text_texture.from_text( font, "Hello" )
	//var tex_tree = gl_texture.from_file( "eggplant.png" )

	
	var program : gl_program
	program.attach_vertex_shader( "gl_text/basic.vert" )
	program.attach_fragment_shader( "gl_text/basic.frag" )
	program.link()
	
	var vpos = program.get_attrib_location( "LVertexPos2D" )
	var tc_pos = program.get_attrib_location( "LTexCoord" )
	var tex_pos = program.get_uniform_location( "tex" )
	
	var vertex_data = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	vertex_data.push( [ -0.5, -0.5 ] )
	vertex_data.push( [ 0.5, -0.5 ] )
	vertex_data.push( [ 0.5, 0.5 ] )
	vertex_data.push( [ -0.5, 0.5 ] )
	vertex_data.bind_and_push( GL_STATIC_DRAW )
	
	var index_data = gl_buffer｢GLuint｣( GL_ELEMENT_ARRAY_BUFFER )
	index_data.push(0)
	index_data.push(1)
	index_data.push(2)
	index_data.push(3)
	index_data.bind_and_push( GL_STATIC_DRAW )
	
	var tex_coord = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	tex_coord.push( [0,0] )
	tex_coord.push( [1,0] )
	tex_coord.push( [1,1] )
	tex_coord.push( [0,1] )
	tex_coord.bind_and_push( GL_STATIC_DRAW )
	
	gl_clear_color(0,0.5,0.5,1)
	
 	var run = true
	while run {
		var e : SDL_Event
		while sdl_poll_event(e) != 0 {
			var q = sdl_poll_event(e)
			e.type_ == SDL_QUIT then  {
				run = false
			}
			e.type_ == SDL_WINDOWEVENT then {
				var win_ev = cast_ptr｢SDL_WindowEvent value_ptr｣(e)
				win_ev.event == SDL_WINDOWEVENT_SIZE_CHANGED then {
					var window_sz = sdl_get_window_size(app.window)
					gl_viewport( 0, 0, window_sz.x, window_sz.y )
				}
			}
		}

		gl_clear( GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT )
		program.use()
		
		gl_enable_vertex_attrib_array( vpos );
		gl_enable_vertex_attrib_array( tc_pos );
		check_gl_error( "vertex_attrib" )
		
		gl_bind_buffer( GL_ARRAY_BUFFER, vertex_data.get_buffer() )
		gl_vertex_attrib_pointer( vpos, 2, GL_FLOAT, GL_FALSE, 2  * GLfloat.aligned_value_size, 0 )
		check_gl_error( "attrib_pointer" )
		
		gl_bind_buffer( GL_ARRAY_BUFFER, tex_coord.get_buffer() )
		gl_vertex_attrib_pointer( tc_pos, 2, GL_FLOAT, GL_FALSE, 2 * GLfloat.aligned_value_size, 0)

		gl_active_texture(GL_TEXTURE0)
		gl_bind_texture(GL_TEXTURE_2D, tex_tree.buffer)
		program.set_uniform( tex_pos, 0 )
		
		gl_bind_buffer( GL_ELEMENT_ARRAY_BUFFER, index_data.get_buffer() )
		gl_draw_elements( GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, 0 )
		
		gl_disable_vertex_attrib_array( vpos )
		gl_disable_vertex_attrib_array( tc_pos )
		sdl_gl_swap_window( app.window )
	}
	
	sdl_ttf_close_font( font )
	sdl_ttf_quit()
}
