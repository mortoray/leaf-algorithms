service game_renderer {
	var ui : game_ui_renderer
	var field : game_field_renderer
	var menu : game_menu_renderer
	
	defn render = ( app_inst : shared game_app, region : viewport ) -> () {
		var field_region = region
		field_region.region_position.y = 40
		field_region.region_size.y -= 40
 		field.render( app_inst.game_state, field_region )
 		
 		//TODO: conditional nesting
 		app_inst.stage == stage_menu then {
			menu.render( app_inst.game_state, region )
			return
 		} 
 		
 		app_inst.stage == stage_play then {
			var ui_region = region
			ui_region.region_size.y = 40
			ui.render( app_inst.game_state, ui_region  )
			return
		} 
		
	}
}

/*
	Convert a position in region coordinates into GL-NDC coordinates.
*/
//TODO: add a kind of read-only value_ref //TODO: adding value_ref caused typing error instead of clean error msg
defn point_to_ndc = ( region_point : GLfloat2, region : viewport ) -> ( : GLfloat2 ) {
	var world_point : GLfloat2 = [
		region_point.x - lossy(region.region_position.x),
		region_point.y - lossy(region.region_position.y)
	]
	
	return [
		world_point.x / lossy(region.window_size.x) * 2 - 1,
		(1 - world_point.y/ lossy(region.window_size.y)) * 2 - 1
	]
}

/*
	Convert a size in region coordinates into GL-NDC size-coordinates.
*/
defn size_to_ndc = ( region_size : GLfloat2, region : viewport ) -> ( : GLfloat2 ) {
	var world_size : GLfloat2 = region_size
	
	return [
		world_size.x / lossy(region.window_size.x) * 2,
		-world_size.y / lossy(region.window_size.y) * 2
	]
}
