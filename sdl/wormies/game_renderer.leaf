typedef GLfloat2 : [
	x : GLfloat,
	y : GLfloat,
]

service game_renderer {
	var program : gl_program
	
	// Attributes/uniforms
	var vpos_pos : GLuint
	var game_size_pos : GLuint
	
	var vertex_data = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	var index_data = gl_buffer｢GLuint｣( GL_ELEMENT_ARRAY_BUFFER )

	defn default = -> construct {
		program.attach_vertex_shader( "wormies/boxes.vert" )
		program.attach_fragment_shader( "wormies/boxes.frag" )
		program.link()
	
		vpos_pos = program.get_attrib_location( "vertex_pos" )
		game_size_pos = program.get_uniform_location( "game_size" )
		
		vertex_data.push([0,0])
		vertex_data.push([0,0])
		vertex_data.push([0,0])
		vertex_data.push([0,0])
		
	}

	defn _push_box = ( pos : ipoint ) -> {
		var vdp = lossy｢GLuint｣(vertex_data.get_size())
		
		vertex_data.push( [ lossy(pos.x), lossy(pos.y) ] )
		vertex_data.push( [ lossy(pos.x+1), lossy(pos.y) ] )
		vertex_data.push( [ lossy(pos.x+1), lossy(pos.y+1) ] )
		vertex_data.push( [ lossy(pos.x), lossy(pos.y+1) ] )
		
		//TODO: efficiency by damned!  (don't update if not changed)
		index_data.push(vdp + 0)
		index_data.push(vdp + 1)
		index_data.push(vdp + 2)
		
		index_data.push(vdp + 0)
		index_data.push(vdp + 2)
		index_data.push(vdp + 3)
	}
	
	defn render = ( state : shared game ) -> {
		vertex_data.clear()
		index_data.clear()
		for i in std.range(0, state.body.get_size()) {
			_push_box( state.body.get(i) )
		}
		_push_box( state.head_pos )
		
		index_data.bind_and_push( GL_STATIC_DRAW )
		vertex_data.bind_and_push( GL_DYNAMIC_DRAW )
	
		program.use()
		
		gl_enable_vertex_attrib_array( vpos_pos )
		gl_vertex_attrib_pointer( vpos_pos, 2, GL_FLOAT, GL_FALSE, 2 * GLfloat.aligned_value_size, 0 )
		
		program.set_uniform( game_size_pos, lossy｢GLfloat｣(state.size.x), lossy｢GLfloat｣(state.size.y) )
		
		gl_bind_buffer( GL_ELEMENT_ARRAY_BUFFER, index_data.get_buffer() )
		gl_draw_elements( GL_TRIANGLES, lossy(index_data.get_size()), GL_UNSIGNED_INT, 0 )
		
		gl_disable_vertex_attrib_array( vpos_pos )
	}
}
