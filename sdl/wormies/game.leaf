//FEATURE: implement == on tuples
typedef ipoint : [
	x : integer,
	y : integer,
]
defn equals = ( a : ipoint, b : ipoint ) -> {
	return a.x == b.x and a.y == b.y
}
defn sub = ( a : ipoint, b : ipoint ) -> ( : ipoint ) {
	return [ a.x - b.x, a.y - b.y ]
}
defn mul = ( a : ipoint, b : integer ) -> ( : ipoint ) {
	return [ a.x * b, a.y * b ]
}
defn add = ( a : ipoint, b : ipoint ) -> ( : ipoint ) {
	return [ a.x + b.x, a.y + b.y ]
}

literal gd_bush = 0
literal gd_food_0 = 1
literal gd_food_1 = 2
literal gd_monster = 3

typedef game_dot : [
	what : integer,
	pos : ipoint,
	prev_pos : ipoint,
	dir : ipoint,
	age : integer,
	warmup : float,
]

literal frame_step = 0.15

literal _worm_warmup_max = 3/2

class game {
	var size : ipoint
	var head_pos : ipoint
	var dir : ipoint = [ 1, 0 ]
	
	var _warmup : float = _worm_warmup_max
	var body : collections.vector｢ipoint｣
	var req_dir : collections.vector｢ipoint｣
	var body_length : integer = 10
	
	var dots : collections.vector｢game_dot｣

	var alive : boolean = true
	var score : integer 
	
	defn default = -> construct {
		size = [ 30, 20 ]
		head_pos = [ rand_integer(0,size.x), rand_integer(0,size.y) ]
		body.add( head_pos )
		_set_next_eat_me()
		_set_next_chase_me()
		_set_next_monster()
		
		for i in std.range(0,15) {
			_add_bush()
		}
	}
	
	defn get_warmup_rel = -> {
		return _warmup / _worm_warmup_max
	}
	
	defn _add_bush = -> {
		var bush = _next_dot()
		bush.what = gd_bush
		bush.dir = [0,0]
		bush.age = 50
		bush.warmup = 0
		dots.add( bush )
	}
	
	defn _get_random_eat_loc = -> ( : ipoint ) {
		return [
			rand_integer( 0, size.x ),
			rand_integer( 0, size.y ),
		]
	}
	defn _set_next_eat_me = -> {
		var food = _next_dot()
		food.what = gd_food_0
		food.dir = [0,0]
		dots.add( food )
	}
	defn _set_next_chase_me = -> {
		var food =_next_dot()
		food.what = gd_food_1
		dots.add(food)
	}
	defn _set_next_monster = -> {
		var monster = _next_dot()
		monster.what = gd_monster
		dots.add(monster)
	}
	
	defn _next_dot = -> ( dot : game_dot ) {
		dot.pos = _get_random_eat_loc()
		dot.prev_pos = dot.pos
		dot.age = 0
		dot.dir = _next_dir()
		dot.warmup = _worm_warmup_max
	}
	
	defn _next_dir = -> { 
		var dir = rand_integer( 0, 4 )
		return select(
			dir == 0 ? [1,0],
			dir == 1 ? [-1,0],
			dir == 2 ? [0,1],
			[0,-1],
		)
	}
	
	defn _eaten = ( what : game_dot ) -> {
		equals( head_pos, what.pos ) then return true
		equals( head_pos, what.prev_pos ) then return true
		//body.get_size() > 1 and equals( body.get(body.get_size()-2), what.pos ) then return true
		return false
	}
	
	defn _move = ( xoff : integer, yoff  : integer ) -> {
		//this does wraparound
		//head_pos.x = mod(head_pos.x + xoff, size.x)
		//head_pos.y = mod(head_pos.y + yoff, size.y)
		
		//this kills if hits edge
		head_pos.x = head_pos.x + xoff
		head_pos.y = head_pos.y + yoff
		head_pos.x < 0 or head_pos.x >= size.x or head_pos.y < 0 or head_pos.y >= size.y then {
			alive = false
			return
		}
		
		body.add( head_pos )
		
		body.get_size() > body_length then {
			body.remove(0)
		}
	}
	
	defn is_body_full = -> {
		return body.get_size() >= body_length
	}
	
	var _step_elapsed : float
	var partial_time : float = 1
	
	
	defn step = ( elapsed : float ) -> {
		alive else {
			partial_time = 1 //may cause blip, but better than nothing appeaering
			return
		}
		
		_warmup > 0 then { 
			_warmup -= elapsed
			return
		}
		
		_step_elapsed += elapsed
		_step_warmup(elapsed)
		while _step_elapsed > frame_step {
			_step_quantized()
			_step_check()
			_step_elapsed -= frame_step
		}
		
		partial_time = _step_elapsed / frame_step
	}
	
	defn _step_warmup = ( elapsed : float ) -> {
		for ndx in std.range(0, dots.get_size()) {
			var dot = dots.get(ndx)
			dot.warmup > 0 then {
				dot.warmup -= elapsed
				dots.set(ndx, dot)
			}
		}
	}
		
	defn _step_quantized = -> {
		req_dir.get_size() > 0 then {
			dir = req_dir.get(0)
			req_dir.remove(0)
		}
		
		dir.x == 0 and dir.y == 0 else {
			_move( dir.x, dir. y)
		}
		
		for ndx in std.range(0, dots.get_size()) {
			dots.set(ndx, _step_dot( dots.get(ndx) ))
		}
	}
	
	defn _step_check = -> {
		for ndx in std.incl_range(dots.get_size()-1,0) {
			var dot = dots.get(ndx)
			
			dot.what == gd_food_0 and _eaten(dot) then {
				score += 1
				body_length += 2
				dots.remove( ndx )
				_set_next_eat_me()
			}
		
			dot.what == gd_food_1 and _eaten(dot) then {
				score += 2
				body_length += 3
				dots.remove( ndx )
				_set_next_chase_me()
			}
		
			(dot.what == gd_monster or dot.what == gd_bush) and equals( head_pos, dot.pos ) then {
				alive = false
			}
		}
		
		_check_collision()
	}
	
	defn _step_dot = ( what : game_dot ) -> ( : game_dot ) {
		var dot = what
		dot.prev_pos = dot.pos
		
 		dot.warmup > 0 then {
 			return dot
 		}
		
		var npos = [
			mod( dot.pos.x + dot.dir.x, size.x ),
			mod( dot.pos.y + dot.dir.y, size.y ),
		]
		dot.what != gd_bush and _does_collide_board(npos) then {
			dot.dir = _next_dir()
		} else {
			dot.pos = npos
		}
		dot.age += 1
		return dot
	}
	
	defn req_move = ( xoff : integer, yoff : integer ) -> {
		_warmup > 0 then {
			dir = [ xoff, yoff ]
		} else {
			req_dir.add( [ xoff, yoff ] )
		}
	}
	
	defn _check_collision = -> {
		_does_collide_board( head_pos, true ) else return
		
		alive = false
	}
	
	defn _does_collide_board = ( pos : ipoint, exclude_head : boolean = false ) -> ( : boolean ) {
		for ndx in std.incl_range(dots.get_size()-1,0) {
			var dot = dots.get(ndx)
			dot.what != gd_bush then next
			
			equals( dot.pos, pos ) then return true
		}
		
		var at = body.find( (pt) -> {
			return equals( pt, pos )
		})
		//FEATURE: pattern matching somehow
		has(at) then {
			return not exclude_head or getopt(at) != body.get_size()-1
		}
		
	}
	
	defn game_over = () -> ( : boolean ) {
		return not alive
	}
}
