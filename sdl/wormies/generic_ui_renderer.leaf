service generic_ui_renderer {
	var program : gl_program
	
	var vpos_pos : GLuint
	var tc_pos : GLuint
	var tex_pos : GLuint
	var placement_pos : GLuint
	var tint_pos : GLuint
	
	var vao : GLuint

	var vertex_data = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	var vertex_texcoord = gl_buffer｢GLfloat2｣( GL_ARRAY_BUFFER )
	var index_data = gl_buffer｢GLuint｣( GL_ELEMENT_ARRAY_BUFFER )

	var last_score : integer  = 0
	
	var font : SDL_TTF_Font value_ptr
	
	defn default = -> construct {
		var r = sdl_ttf_init()
		std.println(["TTF: ", r])
		font = sdl_ttf_open_font( std.u8_encode( "font/leaf1.TTF" ).raw_ptr, 40 )
		as_abi_ptr(font) == 0 then {
			fail string_tag( "Font load failed" )
		}
	
		program.attach_vertex_shader( "wormies/tex_block.vert" )
		program.attach_fragment_shader( "wormies/tex_block.frag" )
		program.link()
	
		vpos_pos = program.get_attrib_location( "vertex_pos" )
		tc_pos = program.get_attrib_location( "tex_coord" )
		tex_pos = program.get_uniform_location( "tex" )
		placement_pos = program.get_uniform_location( "placement" )
		tint_pos = program.get_uniform_location( "tint" )
		
		vao = gl_gen_vertex_array()
		gl_bind_vertex_array( vao )
		gl_enable_vertex_attrib_array( vpos_pos )
		gl_enable_vertex_attrib_array( tc_pos )
		
		vertex_data.push( [ 0, 0 ] )
		vertex_data.push( [ 1, 0 ] )
		vertex_data.push( [ 1, 1 ] )
		vertex_data.push( [ 0, 1 ] )
		vertex_data.bind_and_push( GL_STATIC_DRAW )
		gl_vertex_attrib_pointer( vpos_pos, 2, GL_FLOAT, GL_FALSE, 2 * GLfloat.aligned_value_size, 0 )
		
		index_data.push(0)
		index_data.push(1)
		index_data.push(2)
		index_data.push(3)
		index_data.bind_and_push( GL_STATIC_DRAW )
		
		vertex_texcoord.push( [0,0] )
		vertex_texcoord.push( [1,0] )
		vertex_texcoord.push( [1,1] )
		vertex_texcoord.push( [0,1] )
		vertex_texcoord.bind_and_push( GL_STATIC_DRAW )
		gl_vertex_attrib_pointer( tc_pos, 2, GL_FLOAT, GL_FALSE, 2 * GLfloat.aligned_value_size, 0 )
	}
	
	defn start = ( region : viewport ) -> {
		program.use()
		gl_bind_vertex_array( vao )
		check_gl_error( "vertex_attrib" )
	}
	
	defn end = -> {
	}
	
	defn draw_text =  ( text : gl_text_texture, pos : GLfloat2, rel_anchor : GLfloat2, region : viewport,
		color : GLfloat4 ) -> () {
		gl_active_texture(GL_TEXTURE0)
		gl_bind_texture(GL_TEXTURE_2D, text.buffer)
		program.set_uniform( tex_pos, 0 )
		
		var src_sz = text.size
		var ndc_pos = point_to_ndc( pos, region )
		//TODO: lossy(src_sz) 
		var ndc_size = size_to_ndc( [ lossy(src_sz.x), lossy(src_sz.y) ], region )
		//std.println([ndc_pos.x,",",ndc_pos.y,"  ", ndc_size.x,",",ndc_size.y])
		
		program.set_uniform( placement_pos, 
			ndc_pos.x - rel_anchor.x * ndc_size.x, ndc_pos.y - rel_anchor.y * ndc_size.y, 
			ndc_size.x, ndc_size.y)
		program.set_uniform( tint_pos, color#0, color#1, color#2, color#3 )
		
		gl_bind_buffer( GL_ELEMENT_ARRAY_BUFFER, index_data.get_buffer() )
		gl_draw_elements( GL_TRIANGLE_FAN, lossy(index_data.get_size()), GL_UNSIGNED_INT, 0 )
	}
}

