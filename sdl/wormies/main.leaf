import math
import sys

var main = -> {
	do {
		run()
	} on fail {
		std.print( current_fail )
	}
}

// Viewport in Points
// TODO: still need commas in types!!!
typedef viewport : [
	window_size : ipoint,
	
	//region
	region_position : ipoint,
	//TODO: size is a reserved field! It refers to the number of elements in the tuple
	region_size : ipoint,
]

var pause = true
var last_ticks : float

var run = -> {
	rand_init()
 	var main_viewport : viewport = [ [1200,800], [0, 0], [1200, 800] ]
	var app = sdl_gl_window("Wormies", main_viewport.window_size.x, main_viewport.window_size.y )
	
	var app_inst : shared game_app
	
	var renderer : game_renderer
	
 	var run = true
 	last_ticks = get_elapsed()
 	
	while run {
		var e : SDL_Event
		while sdl_poll_event(e) != 0 {
			e.type_ == SDL_QUIT then  {
				run = false
			}
			e.type_ == SDL_WINDOWEVENT then {
				var win_ev = cast_ptr｢SDL_WindowEvent value_ptr｣(e)
				win_ev.event == SDL_WINDOWEVENT_SIZE_CHANGED then {
					var window_sz = sdl_get_window_size(app.window)
					gl_viewport( 0, 0, window_sz.x, window_sz.y )
					//TODO: missing line on error
					//main_viewport.size = window_sz
					main_viewport.window_size = window_sz
					main_viewport.region_size = window_sz
				}
			}
			e.type_ == SDL_KEYDOWN then {
				var key_ev = cast_ptr｢SDL_KeyboardEvent value_ptr｣(e)
				select(
					app_inst.stage == stage_menu ? key_stage_menu,
					app_inst.stage == stage_play ? key_stage_play,
					key_stage_game_over )( app_inst, key_ev )
			}
		}
		not pause then {
			var cur_ticks = get_elapsed()
			var elapsed = cur_ticks - last_ticks
			app_inst.step( elapsed )
			last_ticks = cur_ticks
		}
		
		gl_clear_color(205/255, 216/255, 208/255,1)
		gl_clear( GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT )

		renderer.render( app_inst.game_state, main_viewport )
		
		sdl_gl_swap_window( app.window )
	}
}

defn key_stage_menu = ( app_inst : shared game_app, key_ev : SDL_KeyboardEvent value_ptr ) -> {
	key_ev.keysym.sym == SDLK_SPACE then {
		app_inst.start_game()
	}
}

defn key_stage_game_over = ( app_inst : shared game_app, key_ev : SDL_KeyboardEvent value_ptr ) -> {
	key_ev.keysym.sym == SDLK_SPACE then {
		app_inst.start_game()
	}
}

defn key_stage_play = ( app_inst : shared game_app, key_ev : SDL_KeyboardEvent value_ptr ) -> {
				
	var unpause = -> {
		pause = false
		last_ticks = get_elapsed()//sdl_get_ticks()
	}
	
	//std.println(["KeyDown Sym:", key_ev.keysym.sym, " Mod:", key_ev.keysym.mod])
	key_ev.keysym.sym == SDLK_UP then { 
		app_inst.game_state.req_move(0,1) 
		unpause()
	}
	key_ev.keysym.sym == SDLK_DOWN then { 
		app_inst.game_state.req_move(0,-1) 
		unpause()
	}
	key_ev.keysym.sym == SDLK_LEFT then { 
		app_inst.game_state.req_move(-1,0) 
		unpause()
	}
	key_ev.keysym.sym == SDLK_RIGHT then { 
		app_inst.game_state.req_move(1,0) 
		unpause()
	}
	key_ev.keysym.sym == SDLK_PAUSE then { 
		std.println(["Pause ", pause])
		pause then {
			unpause()
		} else {
			pause = true
		}
	}
}
