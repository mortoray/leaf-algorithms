import math
import sys

var main = -> {
	do {
		run()
	} on fail {
		std.print( current_fail )
	}
}


var run = -> {
	rand_init()
	var app = sdl_gl_window("Wormies", 1200, 800 )
	
	var state : shared game
	
	var renderer : game_renderer
	
 	var run = true
 	var pause = true
 	var last_ticks = sdl_get_ticks()
 	
	while run {
		var e : SDL_Event
		while sdl_poll_event(e) != 0 {
			var q = sdl_poll_event(e)
			e.type_ == SDL_QUIT then  {
				run = false
			}
			e.type_ == SDL_WINDOWEVENT then {
				var win_ev = cast_ptr｢SDL_WindowEvent value_ptr｣(e)
				win_ev.event == SDL_WINDOWEVENT_SIZE_CHANGED then {
					var window_sz = sdl_get_window_size(app.window)
					gl_viewport( 0, 0, window_sz.x, window_sz.y )
				}
			}
			e.type_ == SDL_KEYDOWN then {
				var key_ev = cast_ptr｢SDL_KeyboardEvent value_ptr｣(e)
				
				var unpause = -> {
					pause = false
					last_ticks = sdl_get_ticks()
				}
				
				//std.println(["KeyDown Sym:", key_ev.keysym.sym, " Mod:", key_ev.keysym.mod])
				key_ev.keysym.sym == SDLK_UP then { 
					state.req_move(0,1) 
					unpause()
				}
				key_ev.keysym.sym == SDLK_DOWN then { 
					state.req_move(0,-1) 
					unpause()
				}
				key_ev.keysym.sym == SDLK_LEFT then { 
					state.req_move(-1,0) 
					unpause()
				}
				key_ev.keysym.sym == SDLK_RIGHT then { 
					state.req_move(1,0) 
					unpause()
				}
				key_ev.keysym.sym == SDLK_PAUSE then { 
					std.println(["Pause ", pause])
					pause then {
						unpause()
					} else {
						pause = true
					}
				}
			}
		}
		not pause then {
			var cur_ticks = sdl_get_ticks()
			state.step( cur_ticks - last_ticks )
			last_ticks = cur_ticks
		}
		
		gl_clear_color(205/255, 216/255, 208/255,1)
		gl_clear( GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT )

		renderer.render( state )
		
		sdl_gl_swap_window( app.window )
	}
}
