import math

var main = -> {
	do {
		run()
	} on fail {
		std.print( current_fail )
	}
}

var run = -> {

	var app = sdl_app_window("Leaf SDL Window", 600, 450 )
	
	var f = sdl_rw_from_file( std.u8_encode("/src/leaf-algorithms/sdl/demo/logo.bmp"), std.u8_encode("rb") )
	check_sdl_ptr( "sdl_rw_from_file", as_abi_ptr(f) )
	
	var image = sdl_load_bmp_rw( f, 1 )
	check_sdl_ptr( "sdl_load_bmp_rw", as_abi_ptr(image) )
	std.println(["image ", image.w, "x", image.h])

	var image_tex = sdl_create_texture_from_surface( app.renderer, image )
	check_sdl_ptr( "sdl_create_texture_from_surface", as_abi_ptr(image_tex) )
 	sdl_free_surface( image )

	var sz = sdl_get_window_size(app.window)
	std.println(["Size: ", sz.x, sz.y])
	
 	var i = 0
 	var run = true
	while run {
		var e : SDL_Event
		while sdl_poll_event(e) != 0 {
			var q = sdl_poll_event(e)
			e.type_ == SDL_QUIT then  {
				run = false
			}
		}

		var q = sdl_set_render_draw_color( app.renderer, 20, 128, 60, 255 )
		check_sdl( "render_draw_color", q )
	
		q = sdl_render_clear(app.renderer)
		check_sdl( "render_clear", q )
		
		var sz = sdl_get_window_size(app.window)
		var rows = sz.y / 50
		var cols = sz.x / 50
		var sz_x = lossy(sz.x) / cols
		var sz_y = lossy(sz.y) / rows
		
		for y in std.range(0,rows) {
			for x in std.range(0,cols) {
				var ph : float = lossy(i*2 + y*20 + x*20)
				var sc = (math.sin(ph/55)+1)/2
				sdl_render_blit( app.renderer, image_tex, [
					x=lossy( x * sz_x),
					y=lossy( y*sz_y),
					w=lossy(sz_x*sc),
					h=lossy(sz_y*sc)] )
			}
		}
		
		//TODO: inline conversion to float?!
		/*var scale : float = lossy(i)
		scale = scale / 100
		sdl_render_blit( app.renderer, image_tex, [x=lossy(i),y=lossy(i),
			w=lossy(100*scale),
			h=lossy(100*scale)] )*/
		
		sdl_render_present(app.renderer)
		i += 1
	}

	sdl_destroy_texture( image_tex )
}
